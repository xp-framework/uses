<?php

use lang\ClassLoader;
use lang\uses\UsesClassLoader;

function uses() {
  $scope= null;
  foreach (func_get_args() as $name) {
    $class= xp::$loader->loadClass0($name);

    // Alias to short name if namespaced code was loaded via uses()
    if ($p= strrpos($class, '\\')) {
      $short= substr($class, $p);
      if (!UsesClassLoader::exists($short)) {
        class_alias($class, $short, false);
        xp::$cn[$short]= $class;
      }
    }

    // Tricky: We can arrive at this point without the class actually existing:
    // A : uses("B")
    // `-- B : uses("A")
    //     `--> A : We are here, class A not complete!
    // "Wait" until we unwind the stack until the first position so A is
    // "complete" before calling __import.
    // Check with class_exists(), because method_exists() triggers autoloading.
    if (class_exists($class, false) && method_exists($class, '__import')) {
      if (null === $scope) {
        $trace= debug_backtrace(0, 3);
        $scope= isset($trace[2]['args'][0]) ? literal($trace[2]['args'][0]) : null;
      }
      $class::__import($scope);
    }
  }
}

module uses {

  /**
   * Initializes this module. Loads omnipresent classes as documented by
   * `package-info.xp` in the lang package, the installs UsesClassLoader
   *
   * @return void
   */
  public function initialize() {
    uses(
      'lang.Generic',
      'lang.Object',
      'lang.StackTraceElement',
      'lang.Throwable',
      'lang.XPException',
      'lang.Error',
      'lang.Type',
      'lang.XPClass', 
      'lang.reflect.Routine',
      'lang.reflect.Parameter',
      'lang.reflect.Method',
      'lang.reflect.TargetInvocationException',
      'lang.reflect.Field',
      'lang.reflect.Constructor',
      'lang.reflect.Modifiers',
      'lang.reflect.Package',
      'lang.FileSystemClassLoader',
      'lang.DynamicClassLoader',
      'lang.ClassLoader',
      'lang.archive.ArchiveClassLoader', 
      'lang.NullPointerException',
      'lang.IllegalAccessException',
      'lang.IllegalArgumentException',
      'lang.IllegalStateException',
      'lang.FormatException',
      'lang.ClassNotFoundException'
    );

    ClassLoader::registerLoader(new UsesClassLoader(), true);
  }
}